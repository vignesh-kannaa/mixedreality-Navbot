using UnityEngine;namespace CrazyMinnow.SALSA.OneClicks{	public class OneClickReadyPlayerMe : OneClickBase	{		/// <summary>		/// RELEASE NOTES:		///		2.5.0-BETA : Initial release.		/// ==========================================================================		/// PURPOSE: This script provides simple, simulated lip-sync input to the		///		Salsa component from text/string values. For the latest information		///		visit crazyminnowstudio.com.		/// ==========================================================================		/// DISCLAIMER: While every attempt has been made to ensure the safe content		///		and operation of these files, they are provided as-is, without		///		warranty or guarantee of any kind. By downloading and using these		///		files you are accepting any and all risks associated and release		///		Crazy Minnow Studio, LLC of any and all liability.		/// ==========================================================================		/// </summary>		public static void Setup(GameObject gameObject, AudioClip clip)		{			////////////////////////////////////////////////////////////////////////////////////////////////////////////			//	SETUP Requirements:			//		use NewExpression("expression name") to start a new viseme/emote expression.			//		use AddShapeComponent to add blendshape configurations, passing:			//			- string array of shape names to look for.			//			  : string array can be a single element.			//			  : string array can be a single regex search string.			//			    note: useRegex option must be set true.			//			- optional string name prefix for the component.			//			- optional blend amount (default = 1.0f).			//			- optional regex search option (default = false).			Init();			#region SALSA-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Salsa);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^.+(head|beard|avatar)$");				AddSmrSearch("^.+teeth$");				////////////////////////////////////////////////////////				// Adjust SALSA settings to taste...				// - data analysis settings				autoAdjustAnalysis = true;				autoAdjustMicrophone = false;				audioUpdateDelay = 0.089798f;				// - advanced dynamics settings				loCutoff = 0.01434442f;				hiCutoff = 0.8047945f;				useAdvDyn = true;				advDynPrimaryBias = 0.5f;				useAdvDynJitter = false;				advDynJitterAmount = 0.25f;				advDynJitterProb = 0.25f;				advDynSecondaryMix = 0f;				emphasizerTrigger = 0f;				////////////////////////////////////////////////////////				// Viseme setup...				NewExpression("w");				AddShapeComponent(new[] { "jawOpen" }, 0.08f, 0f, 0.08f, "jawOpen", 0.0009f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthFunnel"}, 0.08f, 0f, 0.08f, "mouthFunnel", 0.0f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthPucker"}, 0.08f, 0f, 0.08f, "mouthPucker", 0.00412f, true, "^.+(head|beard|avatar)$");				NewExpression("f");				AddShapeComponent(new []{"viseme_FF"}, 0.08f, 0f, 0.08f, "viseme_FF", 0.00603f, true, "^.+(head|beard|avatar)$");				NewExpression("t");				AddShapeComponent(new []{"viseme_DD"}, 0.08f, 0f, 0.08f, "viseme_DD", 0.00533f, true, "^.+(head|beard|avatar)$");				NewExpression("th");				AddShapeComponent(new []{"viseme_TH"}, 0.08f, 0f, 0.08f, "viseme_TH", 0.0095f, true, "^.+(head|beard|avatar)$");				NewExpression("ow");				AddShapeComponent(new []{"mouthFunnel"}, 0.08f, 0f, 0.08f, "mouthFunnel", 0.00077f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthPucker"}, 0.08f, 0f, 0.08f, "mouthPucker", 0.00398f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"viseme_O"}, 0.08f, 0f, 0.08f, "viseme_O", 0.00397f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"jawOpen"}, 0.08f, 0f, 0.08f, "jawOpen", 0.00081f, true, "^.+(teeth|avatar)$");				NewExpression("ee");				AddShapeComponent(new []{"mouthOpen"}, 0.08f, 0f, 0.08f, "mouthOpen", 0.00422f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthSmile"}, 0.08f, 0f, 0.08f, "mouthSmile", 0.0052f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"jawOpen"}, 0.08f, 0f, 0.08f, "jawOpen", 0.00058f, true);				AddShapeComponent(new []{"mouthStretchLeft"}, 0.08f, 0f, 0.08f, "mouthStretchLeft", 0.00571f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthStretchRight"}, 0.08f, 0f, 0.08f, "mouthStretchRight", 0.0057f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthLowerDownLeft"}, 0.08f, 0f, 0.08f, "mouthLowerDownLeft", 0.00122f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthLowerDownRight"}, 0.08f, 0f, 0.08f, "mouthLowerDownRight", 0.00096f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthUpperUpLeft"}, 0.08f, 0f, 0.08f, "mouthUpperUpLeft", 0.00225f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"mouthUpperUpRight"}, 0.08f, 0f, 0.08f, "mouthUpperUpRight", 0.00218f, true, "^.+(head|beard|avatar)$");				NewExpression("oo");				AddShapeComponent(new []{"mouthOpen"}, 0.08f, 0f, 0.08f, "mouthOpen", 0.00751f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"viseme_O"}, 0.08f, 0f, 0.08f, "viseme_O", 0.00135f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"viseme_U"}, 0.08f, 0f, 0.08f, "viseme_U", 0.00109f, true, "^.+(head|beard|avatar)$");				AddShapeComponent(new []{"jawOpen"}, 0.08f, 0f, 0.08f, "jawOpen", 0.00173f, true, "^.+(teeth|avatar)$");			}			#endregion // SALSA-configuration			#region EmoteR-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Emoter);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^.+(head|beard|avatar)$");				useRandomEmotes = false;				isChancePerEmote = true;				numRandomEmotesPerCycle = 0;				randomEmoteMinTimer = 1f;				randomEmoteMaxTimer = 2f;				randomChance = 0.5f;				useRandomFrac = false;				randomFracBias = 0.5f;				useRandomHoldDuration = false;				randomHoldDurationMin = 0.1f;				randomHoldDurationMax = 0.5f;				////////////////////////////////////////////////////////				// Emote setup...				NewExpression("soften");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"mouthSmile"}, 0.25f, 0.1f, 0.2f, "mouthSmile", 0.00257f, true);				AddShapeComponent(new []{"browDownLeft"}, 0.25f, 0.1f, 0.2f, "browDownLeft", 0.00218f, true);				AddShapeComponent(new []{"browInnerUp"}, 0.25f, 0.1f, 0.2f, "browInnerUp", 0.00289f, true);				NewExpression("browsUp");				AddEmoteFlags(false, true, false, 0.427f, true);				AddShapeComponent(new []{"browDownRight"}, 0.25f, 0.1f, 0.2f, "browDownRight", 0.0015f, true);				AddShapeComponent(new []{"browInnerUp"}, 0.25f, 0.1f, 0.2f, "browInnerUp", 0.00777f, true);				AddShapeComponent(new []{"browOuterUpLeft"}, 0.25f, 0.1f, 0.2f, "browOuterUpLeft", 0.00569f, true);				AddShapeComponent(new []{"browOuterUpRight"}, 0.25f, 0.1f, 0.2f, "browOuterUpRight", 0.00473f, true);				NewExpression("browUp");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"browDownRight"}, 0.25f, 0.1f, 0.2f, "browDownRight", 0.006469f, true);				AddShapeComponent(new []{"browInnerUp"}, 0.25f, 0.1f, 0.2f, "browInnerUp", 0.00623f, true);				AddShapeComponent(new []{"browOuterUpLeft"}, 0.25f, 0.1f, 0.2f, "browOuterUpLeft", 0.00128f, true);				AddShapeComponent(new []{"browOuterUpRight"}, 0.25f, 0.1f, 0.2f, "browOuterUpRight", 0.00051f, true);				NewExpression("puff");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"mouthPucker"}, 0.25f, 0.1f, 0.2f, "mouthPucker", 0.00231f, true);				AddShapeComponent(new []{"mouthDimpleLeft"}, 0.25f, 0.1f, 0.2f, "mouthDimpleLeft", 0.0009f, true);				AddShapeComponent(new []{"mouthDimpleRight"}, 0.25f, 0.1f, 0.2f, "mouthDimpleRight", 0.0018f, true);				AddShapeComponent(new []{"cheekPuff"}, 0.25f, 0.1f, 0.2f, "cheekPuff", 0.0023f, true);				AddShapeComponent(new []{"cheekSquintLeft"}, 0.25f, 0.1f, 0.2f, "cheekSquintLeft", 0.00424f, true);				AddShapeComponent(new []{"cheekSquintRight"}, 0.25f, 0.1f, 0.2f, "cheekSquintRight", 0.00629f, true);				AddShapeComponent(new []{"noseSneerLeft"}, 0.25f, 0.1f, 0.2f, "noseSneerLeft", 0.00128f, true);				AddShapeComponent(new []{"noseSneerRight"}, 0.25f, 0.1f, 0.2f, "noseSneerRight", 0.00199f, true);				NewExpression("scrunch");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"eyeSquintLeft"}, 0.25f, 0.1f, 0.2f, "eyeSquintLeft", 0.00282f, true);				AddShapeComponent(new []{"eyeSquintRight"}, 0.25f, 0.1f, 0.2f, "eyeSquintRight", 0.00244f, true);				AddShapeComponent(new []{"browDownLeft"}, 0.25f, 0.1f, 0.2f, "browDownLeft", 0.0027f, true);				AddShapeComponent(new []{"browDownRight"}, 0.25f, 0.1f, 0.2f, "browDownRight", 0.00212f, true);				AddShapeComponent(new []{"cheekSquintLeft"}, 0.25f, 0.1f, 0.2f, "cheekSquintLeft", 0.00501f, true);				AddShapeComponent(new []{"cheekSquintRight"}, 0.25f, 0.1f, 0.2f, "cheekSquintRight", 0.00417f, true);				AddShapeComponent(new []{"noseSneerLeft"}, 0.25f, 0.1f, 0.2f, "noseSneerLeft", 0.00205f, true);				AddShapeComponent(new []{"noseSneerRight"}, 0.25f, 0.1f, 0.2f, "noseSneerRight", 0.0027f, true);				NewExpression("squint");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"eyeSquintLeft"}, 0.25f, 0.1f, 0.2f, "eyeSquintLeft", 0.00295f, true);				AddShapeComponent(new []{"eyeSquintRight"}, 0.25f, 0.1f, 0.2f, "eyeSquintRight", 0.00346f, true);				AddShapeComponent(new []{"mouthDimpleLeft"}, 0.25f, 0.1f, 0.2f, "mouthDimpleLeft", 0.0018f, true);				AddShapeComponent(new []{"mouthDimpleRight"}, 0.25f, 0.1f, 0.2f, "mouthDimpleRight", 0.00148f, true);				AddShapeComponent(new []{"cheekSquintLeft"}, 0.25f, 0.1f, 0.2f, "cheekSquintLeft", 0.00475f, true);				AddShapeComponent(new []{"cheekSquintRight"}, 0.25f, 0.1f, 0.2f, "cheekSquintRight", 0.00366f, true);				NewExpression("focus");				AddEmoteFlags(false, true, false, 1f);				AddShapeComponent(new []{"eyeSquintLeft"}, 0.25f, 0.1f, 0.2f, "eyeSquintLeft", 0.00481f, true);				AddShapeComponent(new []{"eyeSquintRight"}, 0.25f, 0.1f, 0.2f, "eyeSquintRight", 0.00109f, true);				AddShapeComponent(new []{"browDownRight"}, 0.25f, 0.1f, 0.2f, "browDownRight", 0.00295f, true);				AddShapeComponent(new []{"cheekSquintLeft"}, 0.25f, 0.1f, 0.2f, "cheekSquintLeft", 0.00424f, true);				AddShapeComponent(new []{"cheekSquintRight"}, 0.25f, 0.1f, 0.2f, "cheekSquintRight", 0.0034f, true);			}			#endregion // EmoteR-configuration			DoOneClickiness(gameObject, clip);			if (selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>() == null)				selectedObject.AddComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			//Darrin's Tweaks			salsa.useTimingsOverride = true;			salsa.globalDurON = 0.118f;			salsa.globalDurOffBalance = -0.09f;			salsa.globalNuanceBalance = -0.239f;			emoter.NumRandomEmphasizersPerCycle = 4;			EmoteExpression emote;			emote = emoter.FindEmote("soften");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("browsUp");			if (emote != null)				emote.frac = 0.427f;			emote = emoter.FindEmote("browUp");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("puff");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("scrunch");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("squint");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("focus");			if (emote != null)				emote.frac = 1f;			var silenceAnalyzer = selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			if (silenceAnalyzer)			{				silenceAnalyzer.silenceThreshold = 0.9f;				silenceAnalyzer.timingStartPoint = 0.4f;				silenceAnalyzer.timingEndVariance = 0.8f;				silenceAnalyzer.silenceSampleWeight = 0.95f;				silenceAnalyzer.bufferSize = 512;			}		}		private static void UpdateExpression(string visemeName)		{			var currentConfiguration = oneClickConfigurations[oneClickConfigurations.Count - 1];		}	}}